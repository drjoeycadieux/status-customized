name: Status Page CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run every 5 minutes for service monitoring
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
  # Service Health Checks
  monitor-services:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run service health checks
      run: |
        node -e "
        const services = [
          { name: 'Example Website', url: 'https://example.com' },
          { name: 'GitHub', url: 'https://github.com' },
          { name: 'Google', url: 'https://google.com' }
        ];
        
        async function checkService(service) {
          try {
            const start = Date.now();
            const response = await fetch(service.url, { 
              method: 'HEAD',
              timeout: 10000 
            });
            const responseTime = Date.now() - start;
            
            return {
              name: service.name,
              url: service.url,
              status: response.ok ? 'up' : 'down',
              responseTime: responseTime,
              statusCode: response.status,
              timestamp: new Date().toISOString()
            };
          } catch (error) {
            return {
              name: service.name,
              url: service.url,
              status: 'down',
              responseTime: 0,
              error: error.message,
              timestamp: new Date().toISOString()
            };
          }
        }
        
        Promise.all(services.map(checkService)).then(results => {
          console.log('Service Check Results:');
          results.forEach(result => {
            console.log(\`\${result.name}: \${result.status} (\${result.responseTime}ms)\`);
          });
          
          // Store results in environment for later steps
          const fs = require('fs');
          fs.writeFileSync('service-status.json', JSON.stringify(results, null, 2));
        });
        "
        
    - name: Update status data
      run: |
        # Create or update status data file
        mkdir -p public/data
        mv service-status.json public/data/
        
        # Generate timestamp
        echo "{\"lastUpdated\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"}" > public/data/last-update.json
        
    - name: Commit status updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add public/data/
        git diff --staged --quiet || git commit -m "Update service status - $(date -u)"
        git push || echo "No changes to push"

  # Build and Deploy
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Run tests
      run: npm test || echo "No tests configured"
      
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist
        
  # Security and Quality Checks
  security-audit:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level moderate
      
    - name: Run linting
      run: npm run lint || echo "No linting configured"
      
    - name: Type checking
      run: npm run type-check || npx tsc --noEmit
